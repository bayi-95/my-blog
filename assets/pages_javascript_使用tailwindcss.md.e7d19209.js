import{_ as a,c as n,a as l,Q as s,o as p}from"./chunks/framework.abd9ec2a.js";const u=JSON.parse('{"title":"使用tailwindcss","description":"css 预处理工具，提供原子化的样式，灵活的配置，使用方便，tree-shake 减小文件体积。","frontmatter":{"title":"使用tailwindcss","description":"css 预处理工具，提供原子化的样式，灵活的配置，使用方便，tree-shake 减小文件体积。","date":"2023-3-29","isPage":true,"tags":["前端","commit"]},"headers":[],"relativePath":"pages/javascript/使用tailwindcss.md","lastUpdated":1681451291000}'),e={name:"pages/javascript/使用tailwindcss.md"},o=s(`<h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>以下方法是<code>Vite + Vue</code>模式下的安装方法，其他脚手架与框架的使用同理。 <strong>创建项目</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pnpm create vite app --template vue  </span></span>
<span class="line"><span style="color:#A6ACCD;"># yarn create vite app --template vue  </span></span>
<span class="line"><span style="color:#A6ACCD;"># npm create vite app --template vue</span></span></code></pre></div><p><strong>安装必要依赖</strong></p><p>Vite创建的项目默认集成了<code>PostCSS</code>，而<code>TailwindCSS</code>本身就是一个<code>PostCSS</code>插件，所以直接使用即可。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pnpm i -D tailwindcss postcss autoprefixer</span></span>
<span class="line"><span style="color:#A6ACCD;"># yarn add -D tailwindcss postcss autoprefixer</span></span>
<span class="line"><span style="color:#A6ACCD;"># npm i -D tailwindcss postcss autoprefixer</span></span></code></pre></div><p><strong>创建TailwindCSS配置文件</strong></p><p>使用<code>tailwindcss</code>的初始化命令创建会更快：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npx tailwindcss init -p</span></span></code></pre></div><p>这一步会做两件事：</p><ol><li><p>创建<code>postcss.config.js</code>文件，这里的配置主要是添加<code>tailwindcss</code>的插件，这样你编写的css才会被<code>tailwindcss</code>处理；</p></li><li><p>创建<code>tailwind.config.js</code>文件，主要进行扫描规则、主题、插件等配置。</p></li></ol><p>为了打包时TailwindCSS能生成对应的样式文件，需要在<code>tailwind.config.js</code>中正确配置<code>content</code>字段，如以下配置将扫描 <code>src</code> 目录下所有以 <code>vue/js/ts/jsx/tsx</code> 结尾的文件。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/** </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">type</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">import(&#39;tailwindcss&#39;).Config</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> */</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [  </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/**/*.{vue,js,ts,jsx,tsx}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">theme</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">extend</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><strong>注意</strong></p><p>TailwindCSS并不会生成一个全量的样式包，而是根据具体使用到的语法生成对应的样式代码，这样可以确保打包产生的样式包是最小的。</p><p><strong>引入Tailwind的基本指令</strong></p><p><code>tailwind.css</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@tailwind base;  </span></span>
<span class="line"><span style="color:#A6ACCD;">@tailwind components;  </span></span>
<span class="line"><span style="color:#A6ACCD;">@tailwind utilities;  \`\`\`</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">\`main.js\`</span></span></code></pre></div><p>import &#39;./tailwind.css&#39; \`\`\`</p><h2 id="开始使用" tabindex="-1">开始使用 <a class="header-anchor" href="#开始使用" aria-label="Permalink to &quot;开始使用&quot;">​</a></h2><p>现在，你可以开始使用TailwindCSS的语法了：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;template&gt;  </span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;div class=&quot;w-32 h-32 bg-blue-500&quot;&gt;  </span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;/div&gt;  </span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/template&gt;</span></span></code></pre></div><p>如上语法，你将在页面看到一个正方形的蓝色盒子：</p><blockquote><p>TailwindCSS语法检索技巧 TailwindCSS的基本原则是将每一个style语法转换为一个class，因此，在官网检索想要的样式class时，<strong>按照样式的语法来检索是效率最高的</strong>。如想要获取圆角的语法，只需要搜索<code>Border Radius</code>即可：<img src="https://mmbiz.qpic.cn/mmbiz/pfCCZhlbMQRkkr0nJksWP3e4dicVW8gg3AHVynrTrL3uTiaPZMMmEuibzeljC8t9WIqhw6dOJodzxmWILXH16Ujgw/640?wx_fmt=other" alt=""></p></blockquote><h2 id="自定义class中使用tailwind语法" tabindex="-1">自定义class中使用Tailwind语法？ <a class="header-anchor" href="#自定义class中使用tailwind语法" aria-label="Permalink to &quot;自定义class中使用Tailwind语法？&quot;">​</a></h2><p>有时候，你可能会因为重复的元素而不得不自定义一个class，如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;div class=&quot;p-2 text-gray-900 font-semibold&quot;&gt;首页&lt;/div&gt;  </span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;div class=&quot;p-2 text-gray-900 font-semibold&quot;&gt;学习TailwindCSS&lt;/div&gt;  </span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;div class=&quot;p-2 text-gray-900 font-semibold&quot;&gt;TailwindCSS的设计哲学&lt;/div&gt;  </span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;div class=&quot;p-2 text-gray-900 font-semibold&quot;&gt;最佳实践&lt;/div&gt;  \`\`\`</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">以上写法不仅在开发时会造成重复的困扰，也不利于维护，此时我们会希望给每个元素一个class，像这样：</span></span></code></pre></div><div class="menu">首页</div><div class="menu">学习TailwindCSS</div><div class="menu">TailwindCSS的设计哲学</div><div class="menu">最佳实践</div>`,31),t=s(`<p>现在问题来了，在为<code>menu</code>定制样式时，我们该怎样使用TailwindCSS语法呢？</p><p>TailwindCSS提供了<code>@apply</code>语法，这种语法的使用手感与在html模板中使用是一样的：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">.menu {  </span></span>
<span class="line"><span style="color:#A6ACCD;">  @apply p-2 text-gray-900 font-semibold;  </span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p><strong>注意</strong></p><ol><li><p>尽管使用<code>@apply</code>语法可以解决样式复用的问题，但并不推荐在早期就进行抽象，<strong>因为自定义class的做法会生成更多的样式代码，造成生成的css文件变得更大</strong>。</p></li><li><p>还有一个理由可以证明不使用自定义class会更好：你完全可以通过循环的语法来解决此问题：</p></li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;template&gt;  </span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;div  </span></span>
<span class="line"><span style="color:#A6ACCD;">    v-for=&quot;menu in [&#39;首页&#39;, &#39;学习TailwindCSS&#39;, &#39;TailwindCSS的设计哲学&#39;, &#39;最佳实践&#39;]&quot;  </span></span>
<span class="line"><span style="color:#A6ACCD;">    :key=&quot;menu&quot;  </span></span>
<span class="line"><span style="color:#A6ACCD;">    class=&quot;p-2 text-gray-900 font-semibold&quot;&gt;{{{ menu }}}&lt;/div&gt;  </span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/template&gt;</span></span></code></pre></div><p>这样未来维护时，不仅样式的修改变得更加容易，内容区也会变得更好维护。</p><blockquote><p>如果进行的是组件级别的抽象，并且有需要让他人覆盖class的场景，则必须使用自定义class的方案，别无他选。（推荐组件级别的class复用使用BEM的命名规范）</p></blockquote><h2 id="自定义样式中使用tailwind的变量" tabindex="-1">自定义样式中使用Tailwind的变量？ <a class="header-anchor" href="#自定义样式中使用tailwind的变量" aria-label="Permalink to &quot;自定义样式中使用Tailwind的变量？&quot;">​</a></h2><p>大多数情况下，我们完全可以组合使用Tailwind的原子化class来解决问题。但如果就是要使用自定义的样式代码，我们该如何使用到Tailwind配置中定义的变量呢？</p><p>比如下面的代码中，希望为某个元素添加一个上边框，但是又想要使用到Tailwind配置中的<code>gray-200</code>颜色，该怎么办呢？</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">div {  </span></span>
<span class="line"><span style="color:#A6ACCD;">  border-top: 1px solid ?;  </span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>因为<code>TailwindCSS</code>本身是一个<code>PostCSS</code>插件，所以理论上任何有关<code>TailwindCSS</code>的配置信息都可以通过css的方式拿到。</p><p><code>TailwindCSS</code>提供了一个<code>theme</code>函数，可以拿到<code>tailwind.config.js</code>中配置的<code>theme</code>的值：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">div {  </span></span>
<span class="line"><span style="color:#A6ACCD;">  border-top: 1px solid theme(&#39;colors.gray.200&#39;);  </span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>以上代码最后会被编译为：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">div {  </span></span>
<span class="line"><span style="color:#A6ACCD;">  border-top: 1px solid #e5e7eb;  </span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p><strong>注意</strong></p><p><code>TailwindCSS</code>认为，所有不使用其变量的值都为魔法值。比如上方的代码，完全可以使用<code>1px solid #e5e7eb</code>来实现，但是未来如果要对颜色进行统一调整，这行代码将无法达到预期效果。</p><h2 id="使用tailwind配置之外的变量" tabindex="-1">使用Tailwind配置之外的变量？ <a class="header-anchor" href="#使用tailwind配置之外的变量" aria-label="Permalink to &quot;使用Tailwind配置之外的变量？&quot;">​</a></h2><p>有时候，你不得不使用一些超出Tailwind配置之外的值，当你接到一个需求：</p><blockquote><p>在页面绘制一个宽139px，高77px，颜色为#165DFF的盒子。</p></blockquote><p>你找遍了TailwindCSS文档，都没找到可以直接使用的原子化class，这时候，你可能不得不写一些样式：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">div {  </span></span>
<span class="line"><span style="color:#A6ACCD;">  width: 139px;  </span></span>
<span class="line"><span style="color:#A6ACCD;">  height: 77px;  </span></span>
<span class="line"><span style="color:#A6ACCD;">  background-color: #165DFF;  </span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>如果是这样，那岂不是违背了TailwindCSS宣称的 <strong>让开发人员不离开html</strong> 的目标？</p><p>是的！你永远可以相信TailwindCSS！！因为这种情况，它都考虑到了：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;div class=&quot;w-[139px] h-[77px] bg-[#165DFF]&quot;&gt;&lt;/div&gt;</span></span></code></pre></div><p>使用这种方法有两个好处：</p><ol><li><p>开发人员不用离开html，手感还是那个手感，效率更高；</p></li><li><p>同样的class还是只生成一份样式（10个<code>w-[139px]</code>最终只会生成一份样式代码），减少了打包后的样式文件大小</p></li></ol><blockquote><p>尽管这种方法可以优雅地解决问题，但这种 <strong>魔法值</strong> 的方案并不被推荐，因为事实上，这种做法会让样式体系超出规范的范围。如果项目中充斥着这种代码，会给后期的维护造成困难。</p></blockquote><h2 id="全面且好用的响应式方案" tabindex="-1">全面且好用的响应式方案 <a class="header-anchor" href="#全面且好用的响应式方案" aria-label="Permalink to &quot;全面且好用的响应式方案&quot;">​</a></h2><p>在<code>TailwindCSS</code>中写响应式简直是福音，例如这个绿色（如果你使用PC访问，将是蓝色）的盒子：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;div class=&quot;w-32 h-32 bg-green-500&quot; /&gt;</span></span></code></pre></div><p>如果要想让其在<code>768px</code>以上的屏幕上显示为蓝色，你需要这样：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@media (min-width: 768px) {  </span></span>
<span class="line"><span style="color:#A6ACCD;">  div {  </span></span>
<span class="line"><span style="color:#A6ACCD;">    @apply bg-blue-500;  </span></span>
<span class="line"><span style="color:#A6ACCD;">  }  </span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>而<code>TailwindCSS</code>只需要一行代码：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;div class=&quot;w-32 h-32 bg-green-500 md:bg-blue-500&quot; /&gt;</span></span></code></pre></div><p>以上代码表示的含义是：默认显示绿色，在最小为<code>md(768px)</code>的屏幕下显示蓝色。</p><p><code>TailwindCSS</code>响应式的规则为：</p><ol><li><p><strong><code>mobile first</code></strong>，即<strong>手机端优先</strong>，你也可以理解为，什么断点都不设置就相当于断点为0；</p></li><li><p>断点的含义是 <strong>大于等于</strong>，即<code>min-width</code>，而非<code>max-width</code>。</p></li></ol><p><strong>高级用法</strong> 你甚至可以结合任意值语法，实现各种变态的响应式需求，如：</p><blockquote><p>下面的这个盒子，让它在1300px以下（包含1300px）屏幕下显示绿色，以上显示蓝色。</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;div class=&quot;w-32 h-32 max-[1300px]:bg-green-500 bg-blue-500&quot;&gt;&lt;/div&gt;</span></span></code></pre></div><p>为TailwindCSS的设计拍案叫绝！！</p><h2 id="暗黑模式" tabindex="-1">暗黑模式 <a class="header-anchor" href="#暗黑模式" aria-label="Permalink to &quot;暗黑模式&quot;">​</a></h2><p>使用暗黑模式前，你需要在<code>tailwind.config.js</code>中配置：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">/** @type {import(&#39;tailwindcss&#39;).Config} */  </span></span>
<span class="line"><span style="color:#A6ACCD;">module.exports = {  </span></span>
<span class="line"><span style="color:#A6ACCD;">  darkMode: &#39;class&#39;,  </span></span>
<span class="line"><span style="color:#A6ACCD;">  // more options...  </span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>然后，你只需要少量的代码，就可以使用暗黑模式了：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;div class=&quot;w-32 h-32 bg-blue-500 dark:bg-green-500&quot;&gt;&lt;/div&gt;</span></span></code></pre></div><blockquote><p>点击右上角切换暗黑模式，上方的蓝色盒子将变成绿色盒子。</p></blockquote><h2 id="重写-覆盖tailwind配置" tabindex="-1">重写/覆盖Tailwind配置 <a class="header-anchor" href="#重写-覆盖tailwind配置" aria-label="Permalink to &quot;重写/覆盖Tailwind配置&quot;">​</a></h2><p>Tailwind的默认配置与团队的UI规范有出入？莫担心，TailwindCSS提供了一整套的重写、覆盖默认配置的方案，细粒度到每一个属性。</p><p>举个栗子，使用Tailwind的配置来实现<code>Arco Design</code>的字体颜色规范：</p><p><img src="https://mmbiz.qpic.cn/mmbiz/pfCCZhlbMQRkkr0nJksWP3e4dicVW8gg30qmlMelhD4WQBNcY1drUFSYkibibO6MadicG899ExqEFCuUcHKicbEQKfw/640?wx_fmt=other" alt=""></p><p>image.png</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight has-focused-lines"><code><span class="line"><span style="color:#A6ACCD;">// tailwind.config.js  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">/** @type {import(&#39;tailwindcss&#39;).Config} */  </span></span>
<span class="line"><span style="color:#A6ACCD;">module.exports = {  </span></span>
<span class="line"><span style="color:#A6ACCD;">  theme: {  </span></span>
<span class="line"><span style="color:#A6ACCD;">    extend: {  </span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">      textColor: { </span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">        primary: &#39;#1D2129&#39;,  </span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">        regular: &#39;#4E5969&#39;,  </span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">        secondary: &#39;#86909C&#39;,  </span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">        disabled: &#39;#C9CDD4&#39;,  </span></span>
<span class="line"><span style="color:#A6ACCD;">      }  </span></span>
<span class="line"><span style="color:#A6ACCD;">    },  </span></span>
<span class="line"><span style="color:#A6ACCD;">  },  </span></span>
<span class="line"><span style="color:#A6ACCD;">  // ...  </span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>然后就可以使用了：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;span class=&quot;text-primary&quot;&gt;主色&lt;/span&gt; /   </span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;span class=&quot;text-regular&quot;&gt;常规色&lt;/span&gt; /   </span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;span class=&quot;text-secondary&quot;&gt;次要色&lt;/span&gt; /   </span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;span class=&quot;text-disabled&quot;&gt;禁用色&lt;/span&gt; /</span></span></code></pre></div><p>效果如下：</p><p>主色 / 常规色 / 次要色 / 禁用色 /</p><h2 id="放弃使用预处理器" tabindex="-1">放弃使用预处理器 <a class="header-anchor" href="#放弃使用预处理器" aria-label="Permalink to &quot;放弃使用预处理器&quot;">​</a></h2><p>在开始本小节，请读者思考一个问题：</p><blockquote><p>Sass/Less/Stylus等预处理器，给我们带来了什么？</p></blockquote><p>在没有预处理器前，我们的CSS代码是这样的：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">.foo {  </span></span>
<span class="line"><span style="color:#A6ACCD;">  font-size: 12px;  </span></span>
<span class="line"><span style="color:#A6ACCD;">}  </span></span>
<span class="line"><span style="color:#A6ACCD;">.foo .bar {  </span></span>
<span class="line"><span style="color:#A6ACCD;">  font-size: 14px;  </span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>有了预处理器后，代码被简化了：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">.foo {  </span></span>
<span class="line"><span style="color:#A6ACCD;">  font-size: 12px;  </span></span>
<span class="line"><span style="color:#A6ACCD;">  .bar {  </span></span>
<span class="line"><span style="color:#A6ACCD;">    font-size: 14px;  </span></span>
<span class="line"><span style="color:#A6ACCD;">  }  </span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>预处理器在 <code>嵌套语法</code>、<code>变量</code>、<code>常用函数</code>、<code>逻辑处理</code> 等方面相比原生CSS有更大的优势，它可以让编写CSS代码的效率变得更高。</p><p>但是！！请注意！！当我们使用TailwindCSS时，实际推崇的是TailwindCSS官方“标榜”（实际已经不是标榜了，很多都做 到了）的 <strong>不离开html</strong> 、<strong>少样式代码甚至零样式代码</strong> 的价值观。</p><p><strong>总结</strong> 预处理器的核心优势是为了让开发人员更快书写样式代码，而TailwindCSS旨在消除样式代码，既然开发人员都不用写样式代码了，那还需要预处理器干嘛？😄</p><p>因此，TailwindCSS官方极力推荐在项目中移除预处理器</p><p><strong>如果仍然需要使用嵌套语法，怎么办？</strong></p><p>TailwindCSS封装了postcss-nested与postcss-nesting插件，抛出了一个新的postcss插件，你只需要在<code>postcss.config.js</code>文件中加入以下代码，即可在css文件中使用嵌套语法了：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight has-focused-lines"><code><span class="line"><span style="color:#A6ACCD;">module.exports = {  </span></span>
<span class="line"><span style="color:#A6ACCD;">  plugins: {  </span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">    &#39;tailwindcss/nesting&#39;: {}, </span></span>
<span class="line"><span style="color:#A6ACCD;">    tailwindcss: {},  </span></span>
<span class="line"><span style="color:#A6ACCD;">    autoprefixer: {},  </span></span>
<span class="line"><span style="color:#A6ACCD;">  },  </span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p><strong>注意</strong></p><p>实际上，当你在sass/scss/less/styl文件中使用Tailwind语法时，可能会发生错误的预期甚至错误，因为TailwindCSS的某些语法可能会与预处理器的语法冲突，如在sass文件中使用<code>theme</code>函数会得到不同的预期，因为sass中也存在这个函数，而这种写法会让sass预处理器优先处理这个函数，而实际的期望是希望后处理器来处理。</p><hr><p>来源： <a href="https://mp.weixin.qq.com/s/BOQP7rR_IXnwec-GiblBDA" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/BOQP7rR_IXnwec-GiblBDA</a>，如有侵权，请联系删除。</p>`,78);function c(i,d,r,C,A,y){return p(),n("div",null,[o,l(" ``` "),t])}const D=a(e,[["render",c]]);export{u as __pageData,D as default};
